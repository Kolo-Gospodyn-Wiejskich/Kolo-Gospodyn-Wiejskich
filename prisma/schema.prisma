// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Competiton {
    id       String   @id @default(cuid())
    name     String
    imageUrl String
    startsAt DateTime
    endsAt   DateTime

    entries Entry[]
}

model Entry {
    id            String  @id @default(cuid())
    authorId      String
    competitionId String
    title         String
    description   String?
    imageUrl      String

    ratings Rating[]

    author     User       @relation(fields: [authorId], references: [id])
    competiton Competiton @relation(fields: [competitionId], references: [id])

    @@unique([authorId, competitionId])
}

enum RatingType {
    TASTE
    APPEARANCE
    NUTRITION
}

model Rating {
    id       String     @id @default(cuid())
    authorId String
    entryId  String
    type     RatingType
    value    Int

    entry  Entry @relation(fields: [entryId], references: [id])
    author User  @relation(fields: [authorId], references: [id])

    @@unique([authorId, entryId, type])
}

model User {
    id        String @id @default(cuid())
    firstName String
    lastName  String
    password  String

    ratings Rating[]
    entries Entry[]

    // Necessary for Next auth
    accounts Account[]
    sessions Session[]

    @@unique([firstName, lastName])
}

// Necessary for Next auth

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
